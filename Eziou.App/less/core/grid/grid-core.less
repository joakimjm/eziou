////////////////////////////////////////////////////////////////////////////////
//  FLEXBOX GRID: Core styles
////////////////////////////////////////////////////////////////////////////////

/* GENERAL STYLES
*******************************************************************************/

html {
    ////////////////////////////////////////////////////////////////////////////////
    //  1:  Required to make the flex-container fill the viewport.
    ////////////////////////////////////////////////////////////////////////////////

    height: 100%; //1
}

/* CORE STYLES AND UTILITY CLASSES FOR GRID ELEMENTS
*******************************************************************************/

////////////////////////////////////////////////////////////////////////////////
//    1:  width: 100%; was initially added to make sure that g--fit'ed .grid
//        elements would span the entire width of its parent.
//
//    2:  width: 100%; was removed because it makes y-axis grid-cells exceed their
//        grids. SO NO WIDTH: 100% FOR .grid ELEMENTS!
////////////////////////////////////////////////////////////////////////////////

.grid {
    //width: 100%; // 1, 2
    max-width: 100%;
    padding: 0;
    margin: 0;
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex !important;
    -webkit-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
    list-style: none;

    ////////////////////////////////////////////////////////////////////////////////
    //  GRID ELEMENTS
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  1:  Source: http://oli.jp/2011/css3-flexbox/ - if display: box.
    //      "width: auto" should be disabled however
    //
    //  2:  Prevent overflowing content from destroying the layout
    //
    //  3:  Stretch to fill the parent container. Flex-basis set to 0px to force
    //      equal sizes by default. Note that the px-unit is meant to be present.
    //
    //  4:  Required by Firefox. If not present the y-axis grid-cells collapse
    //      unless the container has an absolute height. Flex-basis: auto
    ////////////////////////////////////////////////////////////////////////////////

    @grid-cell-flex-x: 1 1 auto; // 3
    //@grid-cell-flex-y: 1 1 auto; // 4

    & > &,
    &-cell {
        //width: auto; // 1
        max-width: 100%;
        //overflow: hidden; // 2
        position: relative;
        -webkit-box-flex: @grid-cell-flex-x;
        -webkit-flex: @grid-cell-flex-x; // Safari Mac OS
        -moz-box-flex: @grid-cell-flex-x;
        -ms-flex: 1;
        //flex: 1 1 auto;
        flex: @grid-cell-flex-x;
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-box;
        display: -ms-flexbox;
        display: flex;
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  GRID MODIFIERS
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  Y-AXIS GRID
    //
    //  Y-axis grids are layed out vertically instead of horizontally
    //
    //  1:  Make y-axis grid-cell elements span the available width. Disabled again
    //      as grid-cell elements shouldn't try to act as grid-elements, and because
    //      it makes the grid elements overflow parent grids in some test-cases.
    //      If it needs to be part of the code, it should be hard-linked to
    //      grid-cell elements, i.e.:
    //
    //      .grid-cell.grid--y {
    //          width: 100%;
    //      }
    ////////////////////////////////////////////////////////////////////////////////

    &--y {
        // width: 100%; // 1
        -webkit-flex-direction: column; // Safari Mac OS
        -ms-flex-direction: column;
        flex-direction: column;
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  FLEX-ITEM WRAPPING WITHIN A FLEX-CONTAINER, I.E. CHILD ELEMENTS
    //
    //  By default flex-items aren't wrapped when the space of the flex-container
    //  becomes too narrow, so you can apply a modifier class to the flex-container
    //  to enable wrapping of flex-items.
    ////////////////////////////////////////////////////////////////////////////////

    &--wrap {
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  DISTRIBUTION
    //
    //  General distribution of grid-cell elements within the grid
    //  1:  Stretch to fill the parent container. Flex-basis set to 0px to force
    //      equal sizes by default. Note that the px-unit is meant to be present.
    ////////////////////////////////////////////////////////////////////////////////

    &--divide:not(.grid--y) {
        & > .grid,
        & > .grid-cell {
            -webkit-flex: 1 1 0px !important; // 1, Safari Mac OS
            flex: 1 1 0px !important; // 1
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  ALIGNMENT
    //
    //  General alignment of flex-items specified on the flex-container.
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  ALIGNMENT: MAIN AXIS
    //
    //  justify-content: flex-start is the default, so there's no need to have
    //  a specific definition for that, besides being able to make the HTML more
    //  declarative - so let's keep it (at least for now).
    //
    //  1:  For IE10
    ////////////////////////////////////////////////////////////////////////////////

    &--main- {
        &start {
            -webkit-box-pack: start;
            -moz-box-pack: start;
            -webkit-justify-content: flex-start;
            -ms-flex-pack: start;
            justify-content: flex-start;
        }

        &center {
            -webkit-box-pack: center;
            -moz-box-pack: center;
            -webkit-justify-content: center;
            -ms-flex-pack: center;
            justify-content: center;
        }

        &end {
            -webkit-box-pack: end;
            -moz-box-pack: end;
            -webkit-justify-content: flex-end;
            -ms-flex-pack: end;
            justify-content: flex-end;
        }

        &space-between {
            -webkit-box-pack: space-between;
            -moz-box-pack: space-between;
            -webkit-justify-content: space-between;
            -ms-flex-pack: justify; // 1
            justify-content: space-between;
        }

        &space-around {
            -webkit-box-pack: space-around;
            -moz-box-pack: space-around;
            -webkit-justify-content: space-around;
            -ms-flex-pack: distribute; // 1
            justify-content: space-around;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  ALIGNMENT: CROSS AXIS - LESS MIXINS
    ////////////////////////////////////////////////////////////////////////////////

    .grid-cross-alignment(@alignment) {
        -webkit-align-items: @alignment;
        -ms-flex-align: @alignment;
        align-items: @alignment;
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  ALIGNMENT: CROSS AXIS - STYLES
    //
    //  1: For IE10
    ////////////////////////////////////////////////////////////////////////////////

    &--cross- {
        &start {
            .grid-cross-alignment(start); // 1
            .grid-cross-alignment(flex-start)
        }

        &center {
            .grid-cross-alignment(center);
        }

        &stretch {
            .grid-cross-alignment(stretch);
        }

        &baseline {
            .grid-cross-alignment(baseline);
        }

        &end {
            .grid-cross-alignment(end); // 1
            .grid-cross-alignment(flex-end);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  GRID APPLICATION TYPE MODIFIERS
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  SINGLE PAGE APPLICATION (SPA)
    //
    //  Apply the grid--SPA class to the <body> element when creating an SPA with
    //  the grid framework
    ////////////////////////////////////////////////////////////////////////////////

    &--stretch {
        &-height {
            height: 100%;
        }
    }

    body&--SITE {
        min-height: 100%;
    }

    body&--SPA {
        ////////////////////////////////////////////////////////////////////////////////
        //  1:  Required to make the flex-container fill the viewport.
        //
        //  2:  Disable Elastic Scrolling in Safari/Chrome on OSX.
        //
        //      By default Safari/Chrome has a bounce of the entire viewport when
        //      scrolling past the content area. This effect is nice for web pages, but
        //      doesn't make sense for single-page apps (SPAs) as scrolling takes place
        //      in designated scrollview panels. Hence, the elastic/bounce should be
        //      disabled for SPAs, and a simple "overflow: hidden;" on the BODY seems
        //      to do the trick.
        //
        //      Source: http://www.smilingsouls.net/Blog/20110804114957.html
        //
        //  3:  To avoid the elastic scrolling, the property needs to be the full
        //      "overflow: hidden;", i.e. "overflow-y: hidden;" won't suffice.
        ////////////////////////////////////////////////////////////////////////////////

        height: 100%; //1
        margin: 0 auto;
        overflow: hidden; //2, 3
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  GUTTERS
    ////////////////////////////////////////////////////////////////////////////////

    &--gutters {
        ////////////////////////////////////////////////////////////////////////////////
        //  GUTTERS: X-AXIS GRID
        ////////////////////////////////////////////////////////////////////////////////

        &:not(.grid--y) {
            > .grid,
            > .grid-cell {
                margin: @grid-cell-spacing (@grid-cell-spacing / 2);

                &:first-child {
                    margin-left: @grid-cell-spacing;
                }

                &:last-child {
                    margin-right: @grid-cell-spacing;
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////
        //  GUTTERS: Y-AXIS GRID
        ////////////////////////////////////////////////////////////////////////////////

        &[class*="grid--y"] {
            > .grid,
            > .grid-cell {
                margin: (@grid-cell-spacing / 2) @grid-cell-spacing;

                &:first-child {
                    margin-top: @grid-cell-spacing;
                }

                &:last-child {
                    margin-bottom: @grid-cell-spacing;
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////
        //  GUTTERS-AROUND
        ////////////////////////////////////////////////////////////////////////////////

        &-edge {
            ////////////////////////////////////////////////////////////////////////////////
            //  GUTTERS-EDGE: X-AXIS GRID
            ////////////////////////////////////////////////////////////////////////////////

            &:not(.grid--y) {
                > .grid,
                > .grid-cell {
                    margin-top: @grid-cell-spacing;
                    margin-bottom: @grid-cell-spacing;

                    &:first-child {
                        margin-left: @grid-cell-spacing !important;
                    }

                    &:last-child {
                        margin-right: @grid-cell-spacing !important;
                    }
                }
            }

            ////////////////////////////////////////////////////////////////////////////////
            //  GUTTERS-EDGE: Y-AXIS GRID
            ////////////////////////////////////////////////////////////////////////////////

            &[class*="grid--y"] {
                > .grid,
                > .grid-cell {
                    margin-right: @grid-cell-spacing;
                    margin-left: @grid-cell-spacing;

                    &:first-child {
                        margin-top: @grid-cell-spacing !important;
                    }

                    &:last-child {
                        margin-bottom: @grid-cell-spacing !important;
                    }
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////
        //  GUTTERS-MAIN
        //
        //  Main axis gutters
        ////////////////////////////////////////////////////////////////////////////////

        &-main {
            ////////////////////////////////////////////////////////////////////////////////
            //  GUTTERS-MAIN: X-AXIS GRID
            ////////////////////////////////////////////////////////////////////////////////

            &:not(.grid--y) {
                > .grid,
                > .grid-cell {
                    &:first-child {
                        margin-left: @grid-cell-spacing !important;
                    }

                    &:last-child {
                        margin-right: @grid-cell-spacing !important;
                    }
                }
            }

            ////////////////////////////////////////////////////////////////////////////////
            //  GUTTERS-MAIN: Y-AXIS GRID
            ////////////////////////////////////////////////////////////////////////////////

            &[class*="grid--y"] {
                > .grid,
                > .grid-cell {
                    &:first-child {
                        margin-top: @grid-cell-spacing !important;
                    }

                    &:last-child {
                        margin-bottom: @grid-cell-spacing !important;
                    }
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////
        //  GUTTERS-CROSS
        //
        //  Cross axis gutters
        ////////////////////////////////////////////////////////////////////////////////

        &-cross {
            ////////////////////////////////////////////////////////////////////////////////
            //  GUTTERS-CROSS: X-AXIS GRID
            ////////////////////////////////////////////////////////////////////////////////

            &:not(.grid--y) {
                > .grid,
                > .grid-cell {
                    margin-top: @grid-cell-spacing;
                    margin-bottom: @grid-cell-spacing;
                }
            }

            ////////////////////////////////////////////////////////////////////////////////
            //  GUTTERS-CROSS: Y-AXIS GRID
            ////////////////////////////////////////////////////////////////////////////////

            &[class*="grid--y"] {
                > .grid,
                > .grid-cell {
                    margin-right: @grid-cell-spacing;
                    margin-left: @grid-cell-spacing;
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////
        //  GUTTERS-BETWEEN
        //
        //  Gutters between grid-cell elements on the main axis
        ////////////////////////////////////////////////////////////////////////////////

        &-between {
            &:not(.grid--y) {
                > .grid,
                > .grid-cell {
                    margin-right: (@grid-cell-spacing / 2);
                    margin-left: (@grid-cell-spacing / 2);

                    &:first-child {
                        margin-left: 0;
                    }

                    &:last-child {
                        margin-right: 0;
                    }
                }
            }

            &[class*="grid--y"] {
                > .grid,
                > .grid-cell {
                    margin-top: (@grid-cell-spacing / 2);
                    margin-bottom: (@grid-cell-spacing / 2);

                    &:first-child {
                        margin-top: 0;
                    }

                    &:last-child {
                        margin-bottom: 0;
                    }
                }
            }
        }
    }
}

/* UTILITY CLASSES FOR GRID AND GRID-CELL ELEMENTS
*******************************************************************************/

////////////////////////////////////////////////////////////////////////////////
//  G - UTILITY CLASS FOR FLEX-CONTAINERS AND FLEX-ITEMS
////////////////////////////////////////////////////////////////////////////////

.g-- {
    ////////////////////////////////////////////////////////////////////////////////
    //  GUTTERS/SPACING FOR INDIVIDUAL GRID-CELLS
    ////////////////////////////////////////////////////////////////////////////////

    &gutter {
        margin: @grid-cell-spacing;

        ////////////////////////////////////////////////////////////////////////////////
        //  AXIS WIDE GUTTERS/SPACING
        ////////////////////////////////////////////////////////////////////////////////

        &-x {
            margin-right: @grid-cell-spacing !important;
            margin-left: @grid-cell-spacing !important;
        }

        &-y {
            margin-top: @grid-cell-spacing !important;
            margin-bottom: @grid-cell-spacing !important;
        }

        &-main {
            :not(.grid--y) > & {
                margin-right: @grid-cell-spacing !important;
                margin-left: @grid-cell-spacing !important;
            }

            [class*="grid--y"] > & {
                margin-top: @grid-cell-spacing !important;
                margin-bottom: @grid-cell-spacing !important;
            }
        }

        &-cross {
            :not(.grid--y) > & {
                margin-top: @grid-cell-spacing !important;
                margin-bottom: @grid-cell-spacing !important;
            }

            [class*="grid--y"] > & {
                margin-right: @grid-cell-spacing !important;
                margin-left: @grid-cell-spacing !important;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////
        //  DIRECTIONAL
        ////////////////////////////////////////////////////////////////////////////////

        &-top {
            margin-top: @grid-cell-spacing !important;
        }

        &-right {
            margin-right: @grid-cell-spacing !important;
        }

        &-bottom {
            margin-bottom: @grid-cell-spacing !important;
        }

        &-left {
            margin-left: @grid-cell-spacing !important;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  CONTENT WRAPPING
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    // CONTENT WRAPPING: STYLES
    //
    //  1:  Required for IE10
    ////////////////////////////////////////////////////////////////////////////////

    &fit {
        -webkit-box-flex: 0 !important;
        -moz-box-flex: 0 !important;
        -webkit-flex: 0 0 auto !important;
        -ms-flex: 0 0 auto !important;
        -ms-preferred-size: auto !important;
        flex: 0 0 auto !important;
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  ALIGNMENT: CROSS AXIS
    //
    //  Cross axis alignment for individual flex-items. Overrides the general
    //  alignment specified on the flex-container.
    //
    //  Note that there is no individual flex-item alignment on the main axis!
    ////////////////////////////////////////////////////////////////////////////////

    &cross- {
        &start {
            -webkit-align-self: flex-start;
            -ms-flex-item-align: start;
            align-self: flex-start;
        }

        &center {
            -webkit-align-self: center;
            -ms-flex-item-align: center;
            align-self: center;
        }

        &stretch {
            -webkit-align-self: stretch;
            -ms-flex-item-align: stretch;
            align-self: stretch;
        }

        &baseline {
            -webkit-align-self: baseline;
            -ms-flex-item-align: baseline;
            align-self: baseline;
        }

        &end {
            -webkit-align-self: flex-end;
            -ms-flex-item-align: end;
            align-self: flex-end;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  FLEX-ITEM SIZING
    //
    //  Individual flex-item proportional sizing
    //////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////
    //  FLEX-ITEM SIZING: PROPORTIONAL - X-AXIS GRID
    //////////////////////////////////////////////////////////////////////////////////

    .flex-item-width(@width) {
        //min-width: 0;
        max-width: @width;
/*
        -webkit-flex: 1 !important;
        -ms-flex: 1 !important;
        flex: 1 !important;
*/
        -webkit-flex-basis: @width;
        -ms-flex: 1 0 @width;
        flex-basis: @width;
    }

    :not(.grid--y) > & {
        &1of6 {
            .flex-item-width(16.667%);
            .flex-item-width(calc(100%/6));
        }

        &1of5 {
            .flex-item-width(20%);
        }

        &1of4 {
            .flex-item-width(25%);
        }

        &1of3 {
            .flex-item-width(33.333%);
            .flex-item-width(calc(100%/3));
        }

        &1of2,
        &2of4,
        &3of6,
        &4of8,
        &5of10,
        &6of12 {
            .flex-item-width(50%);
        }

        &2of3 {
            .flex-item-width(66.666%);
            .flex-item-width(calc((100% / 3) * 2));
        }

        &3of4 {
            .flex-item-width(75%);
        }
    }

    //////////////////////////////////////////////////////////////////////////////////
    //  FLEX-ITEM SIZING: PROPORTIONAL - Y-AXIS GRID
    //
    //  These styles an absolute height, e.g. 500px, to be specified on the parent
    //  grid in order to work at all
    //////////////////////////////////////////////////////////////////////////////////
    .flex-item-height(@height) {
        max-height: @height;

        /*
-webkit-flex: none !important;
        -ms-flex: none !important;
        flex: none !important;
*/
        flex-basis: @height;
    }

    [class*="grid--y"] > & {
        &1of6 {
            .flex-item-height(16.667%);
            .flex-item-height(calc(100% / 6));
        }

        &1of5 {
            .flex-item-height(20%);
        }

        &1of4 {
            .flex-item-height(25%);
        }

        &1of3 {
            .flex-item-height(33.333%);
            .flex-item-height(calc(100% / 3));
        }

        &1of2,
        &2of4,
        &3of6,
        &4of8,
        &5of10,
        &6of12 {
            .flex-item-height(50%);
        }

        &2of3 {
            .flex-item-height(66.667%);
            .flex-item-height(calc((100% / 3) * 2));
        }

        &3of4 {
            .flex-item-height(75%);
        }
    }

    //////////////////////////////////////////////////////////////////////////////////
    //  FLEX-ITEM SIZING: GROW
    //////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  FLEX-ITEM SIZING: LESS MIXINS
    //
    //  1:  For IE10: Flex-grow doesn't exist as a separate property.
    ////////////////////////////////////////////////////////////////////////////////

    .grow-by(@value) {
        -webkit-flex-grow: @value !important;
        -ms-flex: @value 1 auto !important; // 1
        flex-grow: @value !important;
    }

    ////////////////////////////////////////////////////////////////////////////////
    // FLEX-ITEM SIZING: STYLES
    ////////////////////////////////////////////////////////////////////////////////

    &by {
        &1 {
            .grow-by(1);
        }

        &2 {
            .grow-by(2);
        }

        &3 {
            .grow-by(3);
        }

        &4 {
            .grow-by(4);
        }

        &5 {
            .grow-by(5);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  ORDERING
    //
    //  Individual flex-item ordering within the parent flex-container
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  ORDERING: LESS MIXINS
    ////////////////////////////////////////////////////////////////////////////////

    .grid-cell-order(@position) {
        -webkit-box-ordinal-group: (@position + 1);
        -moz-box-ordinal-group: (@position + 1);
        -webkit-order: @position;
        -ms-flex-order: @position;
        order: @position;
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  ORDERING: STYLES
    ////////////////////////////////////////////////////////////////////////////////

    &order1 {
        .grid-cell-order(1);
    }

    &order2 {
        .grid-cell-order(2)
    }

    ////////////////////////////////////////////////////////////////////////////////
    //  GRID SCROLLING/OVERFLOW
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    //  1:  Inspiration for overflow scrolling with Flexbox:
    //      http://stackoverflow.com/questions/14962468/flexbox-and-vertical-scroll-in-a-full-height-app-using-newer-flexbox-api
    //
    //      Note that using "min-height: 0" only works in Firefox, i.e. Chrome and
    //      Safari loses the ability to scroll, whereas "height: 0" works for all.
    //
    //      IE seems to need this property.
    //      2014-08-17: IE doesn't need this property after all
    ////////////////////////////////////////////////////////////////////////////////

    &scroll {
        //height: 0; //1
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
    }
}